version: '3'

env:
  KCFLAGS: "{{.ADDITIONAL_CLANG_FLAGS}} {{.ADDITIONAL_KCFLAGS}}"
  ADDITIONAL_KBUILD_LDFLAGS: "{{.ADDITIONAL_KBUILD_LDFLAGS}}"
  ADDITIONAL_KBUILD_VMLINUX_OBJS: "{{.ADDITIONAL_KBUILD_VMLINUX_OBJS}}"
  ADDITIONAL_CFLAGS_KASAN_PASSES: "{{.ADDITIONAL_CFLAGS_KASAN_PASSES}}"

tasks:
  make:
    desc: compile the linux kernel to create the final image
    cmds:
      - |
        cd {{.KERNEL}} && make -j${NPROC} \
          LLVM=1 LLVM_IAS=1 \
          CC={{.CLANG}} \
          LD={{.LD}} \
          AR={{.LLVM_AR}} \
          NM={{.LLVM_NM}} \
          STRIP={{.LLVM_STRIP}} \
          OBJCOPY={{.LLVM_OBJCOPY}} \
          OBJDUMP={{.LLVM_OBJDUMP}} \
          READELF={{.LLVM_READELF}} \
          HOSTCC={{.CLANG}} \
          HOSTCXX={{.CXX}} \
          HOSTAR={{.LLVM_AR}} \
          HOSTLD={{.LD}} \
          KCFLAGS="{{.KCFLAGS}}" \
          ADDITIONAL_CFLAGS_KASAN="{{.ADDITIONAL_CFLAGS_KASAN_PASSES}}" \
          ADDITIONAL_KBUILD_LDFLAGS="{{.ADDITIONAL_KBUILD_LDFLAGS}}" \
          ADDITIONAL_KBUILD_VMLINUX_OBJS="{{.ADDITIONAL_KBUILD_VMLINUX_OBJS}}" \
          -f {{.ROOT}}/Makefile.kernel \
          {{.CLI_ARGS}}

  bzImage:
    desc: compile the linux kernel to create the final image
    cmds:
      - task: make
        vars: {CLI_ARGS: "bzImage"}

  clean:
    desc: clean kernel
    cmds:
      - task: make
        vars: {CLI_ARGS: "clean"}

  clean-all:
    desc: clean kernel and generated files (e.g., header files required by static libs)
    cmds:
      - task: make
        vars: {CLI_ARGS: "mrproper"}

  clean-bzImage:
    desc: clean bzImage to trigger recreation once vmlinux got replaced
    cmds:
      - cd {{.KERNEL}} && rm -rf arch/x86/boot/bzImage arch/x86/boot/setup.bin arch/x86/boot/vmlinux.bin arch/x86/boot/zoffset.h arch/x86/boot/compressed/vmlinux arch/x86/boot/compressed/vmlinux.bin vmlinux.a vmlinux vmlinux.o .thinlto-cache

  configure:
    desc: apply custom kernel config required
    cmds:
      - task: make
        vars: {CLI_ARGS: "defconfig"}
      - |
        cd {{.KERNEL}} && scripts/kconfig/merge_config.sh -m \
          .config {{.ROOT}}/kernel-configs/lto.config
      - |
        cd {{.KERNEL}} && scripts/kconfig/merge_config.sh -m \
          .config {{.ROOT}}/kernel-configs/kaslr.config
      - |
        \[ -z "$ENABLE_GDB_BUILD" \] || \
          (cd {{.KERNEL}} && scripts/kconfig/merge_config.sh -m \
            .config {{.ROOT}}/kernel-configs/gdb.config)
      - |
        \[ -z "$ENABLE_DEBUG" \] || \
          (cd {{.KERNEL}} && scripts/kconfig/merge_config.sh -m \
            .config {{.ROOT}}/kernel-configs/debug.config)
      - |
        \[ -z "$ENABLE_KASAN" \] || \
          (cd {{.KERNEL}} && scripts/kconfig/merge_config.sh -m \
            .config {{.ROOT}}/kernel-configs/kasan.config)
      - |
        \[ -z "$ENABLE_KASAN_STACK" \] || \
          (cd {{.KERNEL}} && scripts/kconfig/merge_config.sh -m \
            .config {{.ROOT}}/kernel-configs/kasan-stack.config)
      - |
        \[ -z "$ENABLE_SYZKALLER" \] || \
          (cd {{.KERNEL}} && scripts/kconfig/merge_config.sh -m \
            .config {{.ROOT}}/kernel-configs/syzkaller.config)
      - task: make
        vars: {CLI_ARGS: "olddefconfig"}
      - task: make
        vars: {CLI_ARGS: "modules_prepare"}


  configure-from-config-file:
    desc: apply custom kernel config from a .config file set from KERNEL_CONFIG
    cmds:
      - cp {{.KERNEL_CONFIG}} {{.KERNEL}}/.config
      - task: make
        vars: {CLI_ARGS: "modules_prepare"}

  config:
    desc: apply custom kernel config required
    cmds:
      - if \[ -n "$KERNEL_CONFIG" \]; then task kernel:configure-from-config-file; else task kernel:configure; fi
